// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Execute a Blockless Function
	// (POST /api/v1/functions/execute)
	ExecuteFunction(ctx echo.Context) error
	// Install a Blockless Function
	// (POST /api/v1/functions/install)
	InstallFunction(ctx echo.Context) error
	// Get the result of an Execution Request
	// (POST /api/v1/functions/requests/result)
	ExecutionResult(ctx echo.Context) error
	// Check Node health
	// (GET /api/v1/health)
	Health(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExecuteFunction converts echo context to params.
func (w *ServerInterfaceWrapper) ExecuteFunction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExecuteFunction(ctx)
	return err
}

// InstallFunction converts echo context to params.
func (w *ServerInterfaceWrapper) InstallFunction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstallFunction(ctx)
	return err
}

// ExecutionResult converts echo context to params.
func (w *ServerInterfaceWrapper) ExecutionResult(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExecutionResult(ctx)
	return err
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Health(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/functions/execute", wrapper.ExecuteFunction)
	router.POST(baseURL+"/api/v1/functions/install", wrapper.InstallFunction)
	router.POST(baseURL+"/api/v1/functions/requests/result", wrapper.ExecutionResult)
	router.GET(baseURL+"/api/v1/health", wrapper.Health)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9f2L021TUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
