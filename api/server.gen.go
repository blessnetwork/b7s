// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Execute a Bless Function
	// (POST /api/v1/functions/execute)
	ExecuteFunction(ctx echo.Context) error
	// Execute a Bless Function with a batch of arguments
	// (POST /api/v1/functions/execute/batch)
	ExecuteFunctionBatch(ctx echo.Context) error
	// Install a Bless Function
	// (POST /api/v1/functions/install)
	InstallFunction(ctx echo.Context) error
	// Get the result of an Execution Request
	// (POST /api/v1/functions/requests/result)
	ExecutionResult(ctx echo.Context) error
	// Check Node health
	// (GET /api/v1/health)
	Health(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExecuteFunction converts echo context to params.
func (w *ServerInterfaceWrapper) ExecuteFunction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExecuteFunction(ctx)
	return err
}

// ExecuteFunctionBatch converts echo context to params.
func (w *ServerInterfaceWrapper) ExecuteFunctionBatch(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExecuteFunctionBatch(ctx)
	return err
}

// InstallFunction converts echo context to params.
func (w *ServerInterfaceWrapper) InstallFunction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstallFunction(ctx)
	return err
}

// ExecutionResult converts echo context to params.
func (w *ServerInterfaceWrapper) ExecutionResult(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExecutionResult(ctx)
	return err
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Health(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/functions/execute", wrapper.ExecuteFunction)
	router.POST(baseURL+"/api/v1/functions/execute/batch", wrapper.ExecuteFunctionBatch)
	router.POST(baseURL+"/api/v1/functions/install", wrapper.InstallFunction)
	router.POST(baseURL+"/api/v1/functions/requests/result", wrapper.ExecutionResult)
	router.GET(baseURL+"/api/v1/health", wrapper.Health)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbW2/bOhL+K4R2H2U7cW5o3tI03Qbb02aTgxa7B4FBSSOJtUSqJOXELfzfF7zoZsl3",
	"p24P+tSGoqjhzDf38XfHZ2nGKFApnMvvjvBjSLH+71UUcYiwhOAeRJ5ItRaA8DnJJGHUuXTMOmIhwhTd",
	"PIOfqwfoHr7mIKTjOhlnGXBJQB8YcvWA+tP2SW+LR+owGROBuDkbp4xGCCcJoiwAgWSMJQL9KQiQjAHx",
	"8mvwjNMsAefyqH9+7jpymoFz6dA89YA7rvPci1jPLoYJw/L8tL7aE2OS9ZimCCe9jBEqgTuXkucwc50M",
	"gIs24e+Jlw0zdPtGGMoBfajojJisX6ZO4l/O8fDNyb8Z+3yfnVx9Gl98lf7wanL+TL5GV9/w8f9YPhb/",
	"wf/1H4b+5MOr0/G7h2uGHXeb1zzn0XWIhFTTbzkgJCc0cmYlnzDneLoBQ3gJin9yCJ1L5x+DCkoDi6NB",
	"iQqLoVn1QeZ9AV/OCQYXoOvfFzyrCCJpxrj+ZIZl7Fw6EZFx7vV9lg68BISgIJ8YHw+8CzFQeBmUx6mL",
	"rnuzeeB3il1o3OeUfM3ByreEQJcqlPxfxq2Wyi0RTwezxEG4JSUnXi7hSkoQknVpiWID4YBEBj4JiY9w",
	"sRdhgSYs92OlXfMGA7Afd6rc3fAO3QHwQu/URpRiGmDJ+LQ8vc72w2nevhSOURixcC1+VOx9ioEDejJm",
	"UokAS5QAVuil8HcySCvsinUZ/Q60bq0zKQsgEQN79CY68xpLP66ZRmMk1Fcb+Mc8ytPCMzeFfv3+FpWP",
	"Uci4NjyvFYnobU59va0u3r+cXg/zyHGdkHAhe4ROmI/Vtl5xjuM6TMbAq4P7/b7z6FavCvAZDbZ7V8aE",
	"b/JqHSJrYmV73ZKQZokyfCsM9J92X0t26gyWEb8tqVuqRSN8oJgTVmgk42PgWnIpErkXcZZnwkVTliMf",
	"UyQxj0AiXJnMYhPypnZxSmiEiBSIBEAlCYkOc5os2kB9rIUIlC0o+eHWQPg4r2IdSBYZowLaUPbjnI4N",
	"qIOAGBLuGjuWsf1avV34uJnbGYaW3hdK72sXNI2FK3ar6NGbooCEIXCg0oSXGyDGZwG0hf0gscxLSjz9",
	"4ZKeuj46w6OjrYXlOikIgaMOAm7rV27FISjEJIHANVGpPQSlJIolivEEUMo4IEJDhrDHcmn4yTnjO9Bq",
	"A/QRCTrIfbMsZqq45Z2HnuefQe84OD7vnQJ+1fPOzi56Z8fhKT7H3tn5mb8L9lu4biCuhWaVDCy7jHqO",
	"nmJWz1SIaNxoS2+7vRDKqyxSQHt0pwJqPBV+pRWbtj3uLq6aWyPSV5lUQw67euriZJ2FlIC7ZjQkUYeL",
	"1es5x8aW6OXK1a5Od3ERaqw0b+qiV9VubV2oACpyMcJJxDiRcdom8HNM/BiVW1G5FYmY5UmAPND+BQJL",
	"NRELjFHmhXIHcAGdjCa4K/C/oRPCGVX+A00wJ1iJZnG4slaS9AGnEHzCSQ47OHxTFRixcGQMf4vyD3qD",
	"Uuha4cHy1Wr1ipDruCROfTpq1iBWVht4SoRQiGuTdlc9bMOxM+dxYikzcTkY4Iz07arSFMfdczlgVKSQ",
	"mtLlcjRafVV7QR2TU0nSlXHYvdlmVXfmOkIGhHb6YxpgHqBbmuVyjTh57Te21RUZcxAxSzqc4R3j9bCl",
	"jTtjvwL0RGSMcFEik0zbABLAvI4jkfs+CBHmSTcw27WxVdSTFFjeUQp8x55QwmhUkNoMxCQeg7O1OqyZ",
	"2lkwHCCdK5XvDnOcgjTBQdMbTLTBaqUwW8bn5rTH9RhTUXVI3izMcv3S/65VSKx0PrTa2BlZXlfRWNil",
	"5x4Opx4QPDydnPrf8ERmXyZDn518OTtlp/jsmwzyr342nRIK/EtE/ecLMRTDobgAvFPcLmPWQa3yaQW5",
	"n68e/kAhSUBpdsHxOukxJAnrPTGeBP0nLNId6MkKaOyjxFCC3On1/IT0wgRHx87Mrdb1v82lauuwvXXo",
	"zB7XjAo6dHCHcsDPkcpXIt9XXl9XmRKNj9sG8g3tXpj5J7mwFnFVDHxtt66ZXh8isf6dUm+ecG7S8RDL",
	"O0QbwLGzY3nlyxwniOUyyzsqRi5KyBhQGQN+1PvcauFGCc5FN89EomsWAALp9/vtxsUzkaNuCOtX1aMu",
	"FG/LbCED4HxJ+Kvp3vMXO+PAOdbt75NrBoE2MTBfP0S8U3jGWyokTpLFUc+vE7Qs9ob4l/KFrpNz0syL",
	"9+VXlTR3cKMt0Cx0ptam7MfdzXan2BjaGsqbGPkXSDuksWxSxK1EravytbEOdPumZV1/5kJyHRT7wUTB",
	"4d/x1e/46tDx1TvAiYwNSjqSWBXVCPPQ/VkNV6163I4O0RimPZ15ogwT3roFxencLfTK9lIsq0LViWZp",
	"TybIkrdRueiGTj7hg9SK5vogbfmUz0xZtGakaIQM/Ez5UVmGroYMKHiq/LdiUku/BSISUfCVqeHT6kv6",
	"/KqpgzAHO7pk+iveVDm32uxRKdMQJwJK5nuMJYDpBijB9cmqpdrenm4pQGY4kCQfQ12pWc3YFjtn7vd1",
	"KV6/gfO48eCOOBQyrytHOx8Iq3DXtAkrH2T98lwHqdEQrs2uNpGa4q5mhh30qhzQHSepgqg6vyzQFfHA",
	"AZvNi2dlDf1zs7KEGm5UlB96am+r1/z9Dfut2/EoGfbDFaLdvGsFpkCxl9RbHpsbvmZ5etOm8PcXLjW0",
	"WHAIOTQaoRvOMJhavj2iZYQC8PJopCLrnWQYcDIBLkacMTkyvPi+w6SB5NO51vb+uiFhDkmNus3b9gmL",
	"IuMhts+PUsY7fiDxh15HCUmJ7J7m2JpontNR0XP/6Zq6r98/NCF+AB1bOPT5u5X507QyX7TPpU6HZwmc",
	"4uQN8ztCm7eEBkhFfroaYYLAhyccGY3IeWJncC4HA2GW+4QpwRfmtXncn0q5iUCvLx7QO8CBCcYfgE+A",
	"Iw8LCBAzvciPGdCru1t00j8qa6ra2PcVK4nUXFbH6BPuQUiktvfqL6oEEbgwnz7qn/ZfKcpYBhRnxLl0",
	"TvpH/RPlHrCM9d0HOCODyfGg4HKlVUojWFch8MaOTOF2A1kpkCb5Nqg21p7bIPk1C6ZWxyRQ/QmcZYm9",
	"7uCLMDGIUbINfpZk57dnrbHiJSRXUKuqMbo8p9kzPDp6CULL2cUWpQ/lmE/NI8xc59QQMp+tTHBCgpoh",
	"59UM+1n3Gwb6SBgAmuqaIkPkqUpAljNL4kjUdVI4OulbCKKBHpveHErFWNQTUXm6ird1vbkcX1+BND3i",
	"+kJw6/69xwaYM6PkPxR5Cyb7fy34FZgwk/hzcFgbmMS0ZRZD0vZtVls3u/GFrduCHmSH6JYQ/uOQtqj7",
	"tZheXAcOwv6YsqcEggiCOVwsud/a0ref0ePjdqigGwXrNbsW2KFqaOFlMdFs2M2agdOPkvRcT2uhITRS",
	"1tzkIDmBiZLwCsuyD3uytihXoCjWDRNFQwQdiLmOwR+b0MzunAfHu2L5xWTS6Ol0SEJTR4QlcDrHqK4b",
	"FDyxC4/6ULvYcuYT4FMZExrZqLmpp+Y3M2tH3o1YW1wOTBbYL9LAgPliYP9Q8DDtnJrsZu788Z+Ak9BW",
	"WM19EKYBwhNMEuyRhMipUx5kLzx7nP0/AAD//+ieTQJXQQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
