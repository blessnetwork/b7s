// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Execute a Blockless Function
	// (POST /api/v1/functions/execute)
	ExecuteFunction(ctx echo.Context) error
	// Install a Blockless Function
	// (POST /api/v1/functions/install)
	InstallFunction(ctx echo.Context) error
	// Get the result of an Execution Request
	// (POST /api/v1/functions/requests/result)
	ExecutionResult(ctx echo.Context) error
	// Check Node health
	// (GET /api/v1/health)
	Health(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExecuteFunction converts echo context to params.
func (w *ServerInterfaceWrapper) ExecuteFunction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExecuteFunction(ctx)
	return err
}

// InstallFunction converts echo context to params.
func (w *ServerInterfaceWrapper) InstallFunction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstallFunction(ctx)
	return err
}

// ExecutionResult converts echo context to params.
func (w *ServerInterfaceWrapper) ExecutionResult(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExecutionResult(ctx)
	return err
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Health(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/functions/execute", wrapper.ExecuteFunction)
	router.POST(baseURL+"/api/v1/functions/install", wrapper.InstallFunction)
	router.POST(baseURL+"/api/v1/functions/requests/result", wrapper.ExecutionResult)
	router.GET(baseURL+"/api/v1/health", wrapper.Health)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
