// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// AggregatedResult Result of an Execution Request
type AggregatedResult struct {
	// Frequency Frequency of this result among all nodes that executed the request
	Frequency *float32 `json:"frequency,omitempty"`

	// Peers Libp2p IDs of the Nodes that got this result
	Peers *[]string `json:"peers,omitempty"`

	// Result Actual outputs of the execution, like Standard Output, Standard Error, Exit Code etc..
	Result *ExecutionResult `json:"result,omitempty"`
}

// AggregatedResults List of unique results of the Execution Request
type AggregatedResults = []AggregatedResult

// AttributeAttestors defines model for AttributeAttestors.
type AttributeAttestors struct {
	// Each LibP2P Peer IDs of each mandatory attestor
	Each *[]string `json:"each,omitempty"`

	// OneOf LibP2P Peer IDs of attestors where we require at least one
	OneOf *[]string `json:"one_of,omitempty"`
}

// ExecutionConfig Configuration options for the Execution Request
type ExecutionConfig struct {
	// Attributes Attributes that the executing Node should have
	Attributes *NodeAttributes `json:"attributes,omitempty"`

	// ConsensusAlgorithm Which consensus algorithm should be formed for this execution
	ConsensusAlgorithm *string `json:"consensus_algorithm,omitempty"`

	// EnvVars Environment variables for the Blockless Function
	EnvVars *[]NamedValue `json:"env_vars,omitempty"`

	// NumberOfNodes Number of nodes that should execute the Blockless Function
	NumberOfNodes *int `json:"number_of_nodes,omitempty"`

	// Permissions Permissions for the Execution
	Permissions       *[]string          `json:"permissions,omitempty"`
	ResultAggregation *ResultAggregation `json:"result_aggregation,omitempty"`

	// Runtime Configuration options for the Blockless Runtime
	Runtime *RuntimeConfig `json:"runtime,omitempty"`

	// Stdin Standard Input for the Blockless Function
	Stdin *string `json:"stdin,omitempty"`

	// Threshold Portion of the nodes that should respond with a result to consider this execution successful
	Threshold *float32 `json:"threshold,omitempty"`

	// Timeout How long should the execution take
	Timeout *int `json:"timeout,omitempty"`
}

// ExecutionParameter defines model for ExecutionParameter.
type ExecutionParameter struct {
	Value string `json:"value"`
}

// ExecutionRequest defines model for ExecutionRequest.
type ExecutionRequest struct {
	// Config Configuration options for the Execution Request
	Config *ExecutionConfig `json:"config,omitempty"`

	// FunctionId CID of the function
	FunctionId string `json:"function_id"`

	// Method Name of the WASM file to execute
	Method string `json:"method"`

	// Parameters CLI arguments for the Blockless Function
	Parameters *[]ExecutionParameter `json:"parameters,omitempty"`

	// Topic In the scenario where workers form subgroups, you can target a specific subgroup by specifying its identifier
	Topic *string `json:"topic,omitempty"`
}

// ExecutionResponse defines model for ExecutionResponse.
type ExecutionResponse struct {
	// Cluster Information about the cluster of nodes that executed this request
	Cluster *NodeCluster `json:"cluster,omitempty"`

	// Code Status of the execution
	Code *string `json:"code,omitempty"`

	// Message If the Execution Request failed, this message might have more info about the error
	Message *string `json:"message,omitempty"`

	// RequestId ID of the Execution Request
	RequestId *string `json:"request_id,omitempty"`

	// Results List of unique results of the Execution Request
	Results *AggregatedResults `json:"results,omitempty"`
}

// ExecutionResult Actual outputs of the execution, like Standard Output, Standard Error, Exit Code etc..
type ExecutionResult struct {
	// ExitCode Exit code of the execution
	ExitCode *string `json:"exit_code,omitempty"`

	// Stderr Standard Error of the execution
	Stderr *string `json:"stderr,omitempty"`

	// Stdout Standard Output of the execution
	Stdout *string `json:"stdout,omitempty"`
}

// ExecutionResultRequest Get the result of an Execution Request, identified by the request ID
type ExecutionResultRequest struct {
	// Id ID of the Execution Request
	Id string `json:"id"`
}

// ExecutionResultResponse defines model for ExecutionResultResponse.
type ExecutionResultResponse = ExecutionResponse

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Code *string `json:"code,omitempty"`
}

// InstallRequest defines model for InstallRequest.
type InstallRequest struct {
	// Cid CID of the function
	Cid string `json:"cid"`

	// Topic In a scneario where workers form subgroups, you can target a specific subgroup by specifying its identifier
	Topic *string `json:"topic,omitempty"`
	Uri   *string `json:"uri,omitempty"`
}

// InstallResponse defines model for InstallResponse.
type InstallResponse struct {
	Code *string `json:"code,omitempty"`
}

// NamedValue A key-value pair
type NamedValue struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// NodeAttributes Attributes that the executing Node should have
type NodeAttributes struct {
	// AttestationRequired Is it necessary that the Node attributes are vouched for by an attestor
	AttestationRequired *bool `json:"attestation_required,omitempty"`
	Attestors           *struct {
		// Each LibP2P Peer IDs of each mandatory attestor
		Each *[]string `json:"each,omitempty"`

		// OneOf LibP2P Peer IDs of attestors where we require at least one
		OneOf *[]string `json:"one_of,omitempty"`
	} `json:"attestors,omitempty"`
	Values *struct {
		Name  string `json:"name"`
		Value string `json:"value"`
	} `json:"values,omitempty"`
}

// NodeCluster Information about the cluster of nodes that executed this request
type NodeCluster struct {
	// Main LibP2P ID of the Primary node for the cluster
	Main *string `json:"main,omitempty"`

	// Peers LibP2P IDs of the Nodes in this cluster
	Peers *[]string `json:"peers,omitempty"`
}

// ResultAggregation defines model for ResultAggregation.
type ResultAggregation struct {
	Enable *bool `json:"enable,omitempty"`

	// Parameters A key-value pair
	Parameters *NamedValue `json:"parameters,omitempty"`
	Type       *string     `json:"type,omitempty"`
}

// RuntimeConfig Configuration options for the Blockless Runtime
type RuntimeConfig struct {
	DebugInfo       *bool   `json:"debug_info,omitempty"`
	DriversRootPath *string `json:"drivers_root_path,omitempty"`
	Entry           *string `json:"entry,omitempty"`
	Fuel            *int    `json:"fuel,omitempty"`
	Logger          *string `json:"logger,omitempty"`

	// Memory Memory limit for this execution
	Memory *int `json:"memory,omitempty"`

	// RunTime How long should the execution take
	RunTime *int `json:"run_time,omitempty"`
}

// ExecuteFunctionJSONRequestBody defines body for ExecuteFunction for application/json ContentType.
type ExecuteFunctionJSONRequestBody = ExecutionRequest

// InstallFunctionJSONRequestBody defines body for InstallFunction for application/json ContentType.
type InstallFunctionJSONRequestBody = InstallRequest

// ExecutionResultJSONRequestBody defines body for ExecutionResult for application/json ContentType.
type ExecutionResultJSONRequestBody = ExecutionResultRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ExecuteFunctionWithBody request with any body
	ExecuteFunctionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteFunction(ctx context.Context, body ExecuteFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstallFunctionWithBody request with any body
	InstallFunctionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstallFunction(ctx context.Context, body InstallFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecutionResultWithBody request with any body
	ExecutionResultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecutionResult(ctx context.Context, body ExecutionResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Health request
	Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ExecuteFunctionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteFunctionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteFunction(ctx context.Context, body ExecuteFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteFunctionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallFunctionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallFunctionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallFunction(ctx context.Context, body InstallFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallFunctionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecutionResultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecutionResultRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecutionResult(ctx context.Context, body ExecutionResultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecutionResultRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewExecuteFunctionRequest calls the generic ExecuteFunction builder with application/json body
func NewExecuteFunctionRequest(server string, body ExecuteFunctionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteFunctionRequestWithBody(server, "application/json", bodyReader)
}

// NewExecuteFunctionRequestWithBody generates requests for ExecuteFunction with any type of body
func NewExecuteFunctionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/functions/execute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInstallFunctionRequest calls the generic InstallFunction builder with application/json body
func NewInstallFunctionRequest(server string, body InstallFunctionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstallFunctionRequestWithBody(server, "application/json", bodyReader)
}

// NewInstallFunctionRequestWithBody generates requests for InstallFunction with any type of body
func NewInstallFunctionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/functions/install")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExecutionResultRequest calls the generic ExecutionResult builder with application/json body
func NewExecutionResultRequest(server string, body ExecutionResultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecutionResultRequestWithBody(server, "application/json", bodyReader)
}

// NewExecutionResultRequestWithBody generates requests for ExecutionResult with any type of body
func NewExecutionResultRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/functions/requests/result")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHealthRequest generates requests for Health
func NewHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ExecuteFunctionWithBodyWithResponse request with any body
	ExecuteFunctionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteFunctionResponse, error)

	ExecuteFunctionWithResponse(ctx context.Context, body ExecuteFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteFunctionResponse, error)

	// InstallFunctionWithBodyWithResponse request with any body
	InstallFunctionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallFunctionResponse, error)

	InstallFunctionWithResponse(ctx context.Context, body InstallFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallFunctionResponse, error)

	// ExecutionResultWithBodyWithResponse request with any body
	ExecutionResultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecutionResultResponse, error)

	ExecutionResultWithResponse(ctx context.Context, body ExecutionResultJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecutionResultResponse, error)

	// HealthWithResponse request
	HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error)
}

type ExecuteFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExecutionResponse
}

// Status returns HTTPResponse.Status
func (r ExecuteFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstallFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstallResponse
}

// Status returns HTTPResponse.Status
func (r InstallFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstallFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExecutionResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExecutionResultResponse
}

// Status returns HTTPResponse.Status
func (r ExecutionResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecutionResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthResponse
}

// Status returns HTTPResponse.Status
func (r HealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ExecuteFunctionWithBodyWithResponse request with arbitrary body returning *ExecuteFunctionResponse
func (c *ClientWithResponses) ExecuteFunctionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteFunctionResponse, error) {
	rsp, err := c.ExecuteFunctionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteFunctionResponse(rsp)
}

func (c *ClientWithResponses) ExecuteFunctionWithResponse(ctx context.Context, body ExecuteFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteFunctionResponse, error) {
	rsp, err := c.ExecuteFunction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteFunctionResponse(rsp)
}

// InstallFunctionWithBodyWithResponse request with arbitrary body returning *InstallFunctionResponse
func (c *ClientWithResponses) InstallFunctionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallFunctionResponse, error) {
	rsp, err := c.InstallFunctionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallFunctionResponse(rsp)
}

func (c *ClientWithResponses) InstallFunctionWithResponse(ctx context.Context, body InstallFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallFunctionResponse, error) {
	rsp, err := c.InstallFunction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallFunctionResponse(rsp)
}

// ExecutionResultWithBodyWithResponse request with arbitrary body returning *ExecutionResultResponse
func (c *ClientWithResponses) ExecutionResultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecutionResultResponse, error) {
	rsp, err := c.ExecutionResultWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecutionResultResponse(rsp)
}

func (c *ClientWithResponses) ExecutionResultWithResponse(ctx context.Context, body ExecutionResultJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecutionResultResponse, error) {
	rsp, err := c.ExecutionResult(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecutionResultResponse(rsp)
}

// HealthWithResponse request returning *HealthResponse
func (c *ClientWithResponses) HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error) {
	rsp, err := c.Health(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthResponse(rsp)
}

// ParseExecuteFunctionResponse parses an HTTP response from a ExecuteFunctionWithResponse call
func ParseExecuteFunctionResponse(rsp *http.Response) (*ExecuteFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExecuteFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExecutionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInstallFunctionResponse parses an HTTP response from a InstallFunctionWithResponse call
func ParseInstallFunctionResponse(rsp *http.Response) (*InstallFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstallFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstallResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExecutionResultResponse parses an HTTP response from a ExecutionResultWithResponse call
func ParseExecutionResultResponse(rsp *http.Response) (*ExecutionResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExecutionResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExecutionResultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHealthResponse parses an HTTP response from a HealthWithResponse call
func ParseHealthResponse(rsp *http.Response) (*HealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Execute a Blockless Function
	// (POST /api/v1/functions/execute)
	ExecuteFunction(ctx echo.Context) error
	// Install a Blockless Function
	// (POST /api/v1/functions/install)
	InstallFunction(ctx echo.Context) error
	// Get the result of an Execution Request
	// (POST /api/v1/functions/requests/result)
	ExecutionResult(ctx echo.Context) error
	// Check Node health
	// (GET /api/v1/health)
	Health(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExecuteFunction converts echo context to params.
func (w *ServerInterfaceWrapper) ExecuteFunction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExecuteFunction(ctx)
	return err
}

// InstallFunction converts echo context to params.
func (w *ServerInterfaceWrapper) InstallFunction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstallFunction(ctx)
	return err
}

// ExecutionResult converts echo context to params.
func (w *ServerInterfaceWrapper) ExecutionResult(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExecutionResult(ctx)
	return err
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Health(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/functions/execute", wrapper.ExecuteFunction)
	router.POST(baseURL+"/api/v1/functions/install", wrapper.InstallFunction)
	router.POST(baseURL+"/api/v1/functions/requests/result", wrapper.ExecutionResult)
	router.GET(baseURL+"/api/v1/health", wrapper.Health)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
